{"version":3,"sources":["redux/reducer.js","components/TodoItem.js","components/DisplayTodos.js","Images/display.gif","Images/imagex.gif","components/Todos.js","App.js","redux/store.js","index.js"],"names":["addTodoReducer","createSlice","name","initialState","reducers","addTodos","state","action","push","payload","removeTodos","filter","item","id","updateTodos","map","todo","completeTodos","completed","actions","reducer","TodoItem","props","updateTodo","removeTodo","completeTodo","inputRef","useRef","motion","li","initial","x","transition","type","duration","animate","whileHover","scale","exit","backgroundColor","className","ref","disabled","defaultValue","onKeyPress","e","value","which","current","update","button","whileTap","onClick","focus","style","color","swal","title","text","icon","timer","then","removeEdited","connect","todos","dispatch","addTodo","obj","useState","sort","setSort","AnimatePresence","length","setTodo","src","DisplayImage","alt","onChange","target","handleChange","Math","floor","random","DisplayImageX","App","h1","y","div","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c4aee80.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [];\n\nconst addTodoReducer = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    //here we will write our reducer\n    //Adding todos\n    addTodos: (state, action) => {\n      state.push(action.payload);\n      return state;\n    },\n    //remove todos\n    removeTodos: (state, action) => {\n      return state.filter((item) => item.id !== action.payload);\n    },\n    //update todos\n    updateTodos: (state, action) => {\n      return state.map((todo) => {\n        if (todo.id === action.payload.id) {\n          return {\n            ...todo,\n            item: action.payload.item,\n          };\n        }\n        return todo;\n      });\n    },\n    //completed\n    completeTodos: (state, action) => {\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          return {\n            ...todo,\n            completed: true,\n          };\n        }\n        return todo;\n      });\n    },\n  },\n});\n\nexport const {\n  addTodos,\n  removeTodos,\n  updateTodos,\n  completeTodos,\n} = addTodoReducer.actions;\nexport const reducer = addTodoReducer.reducer;\n","import { motion } from \"framer-motion\";\nimport React, { useRef } from \"react\";\nimport { AiFillEdit } from \"react-icons/ai\";\nimport { IoCheckmarkDoneSharp, IoClose } from \"react-icons/io5\";\nimport swal from 'sweetalert';\n\nconst TodoItem = (props) => {\n  const { item, updateTodo, removeTodo, completeTodo } = props;\n\n  const inputRef = useRef(true);\n\n  const changeFocus = () => {\n    inputRef.current.disabled = false;\n    inputRef.current.focus();\n  };\n\n  const update = (id, value, e) => {\n    if (e.which === 13) {\n      //here 13 is key code for enter key\n      updateTodo({ id, item: value });\n      inputRef.current.disabled = true;\n    }\n  };\n\n  const removeEdited = (item)=>{\n    swal({\n      title: \"Keep Performing Tasks\",\n      text: \"Deletion Successfully Completed\",\n      icon: \"success\",\n      button: \"Click Here\",\n      timer:3000,\n    }).then(()=>{\n      removeTodo(item.id)\n    });\n  };\n\n  return (\n    <motion.li\n      initial={{ x: \"150vw\", transition: { type: \"spring\", duration: 2 } }}\n      animate={{ x: 0, transition: { type: \"spring\", duration: 2 } }}\n      whileHover={{\n        scale: 0.9,\n        transition: { type: \"spring\", duration: 0.1 },\n      }}\n      exit={{\n        x: \"-60vw\",\n        scale: [1, 0],\n        transition: { duration: 0.5 },\n        backgroundColor: \"rgba(255,0,0,1)\",\n      }}\n      key={item.id}\n      className=\"card\"\n    >\n      <textarea\n        ref={inputRef}\n        disabled={inputRef}\n        defaultValue={item.item}\n        onKeyPress={(e) => update(item.id, inputRef.current.value, e)}\n      />\n      <div className=\"btns\">\n        <motion.button\n          whileHover={{ scale: 1.4 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={() => changeFocus()}\n        >\n          {\" \"}\n          <AiFillEdit />{\" \"}\n        </motion.button>\n        {item.completed === false && (\n          <motion.button\n            whileHover={{ scale: 1.4 }}\n            whileTap={{ scale: 0.9 }}\n            style={{ color: \"green\" }}\n            onClick={() => completeTodo(item.id)}\n          >\n            <IoCheckmarkDoneSharp />\n          </motion.button>\n        )}\n        <motion.button\n          whileHover={{ scale: 1.4 }}\n          whileTap={{ scale: 0.9 }}\n          style={{ color: \"red\" }}\n          onClick={() => removeEdited(item)}\n        >\n          {\" \"}\n          <IoClose />\n        </motion.button>{\" \"}\n      </div>\n      {item.completed && <span className=\"completed\">done</span>}\n    </motion.li>\n  );\n};\n\nexport default TodoItem;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  addTodos,\n  completeTodos,\n  removeTodos,\n  updateTodos,\n} from \"../redux/reducer\";\nimport TodoItem from \"./TodoItem\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTodo: (obj) => dispatch(addTodos(obj)),\n    removeTodo: (id) => dispatch(removeTodos(id)),\n    updateTodo: (obj) => dispatch(updateTodos(obj)),\n    completeTodo: (id) => dispatch(completeTodos(id)),\n  };\n};\n\nconst DisplayTodos = (props) => {\n  const [sort, setSort] = useState(\"active\");\n  return (\n    <div className=\"displaytodos\">\n      <div className=\"buttons\">\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={() => setSort(\"active\")}\n        >\n          Active\n        </motion.button>\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={() => setSort(\"completed\")}\n        >\n          Completed\n        </motion.button>\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={() => setSort(\"all\")}\n        >\n          All\n        </motion.button>\n      </div>\n      <ul>\n        <AnimatePresence>\n          {props.todos.length > 0 && sort === \"active\"\n            ? props.todos.map((item) => {\n                return (\n                  item.completed === false && (\n                    <TodoItem\n                      key={item.id}\n                      item={item}\n                      removeTodo={props.removeTodo}\n                      updateTodo={props.updateTodo}\n                      completeTodo={props.completeTodo}\n                    />\n                  )\n                );\n              })\n            : null}\n          {/* for completed items */}\n          {props.todos.length > 0 && sort === \"completed\"\n            ? props.todos.map((item) => {\n                return (\n                  item.completed === true && (\n                    <TodoItem\n                      key={item.id}\n                      item={item}\n                      removeTodo={props.removeTodo}\n                      updateTodo={props.updateTodo}\n                      completeTodo={props.completeTodo}\n                    />\n                  )\n                );\n              })\n            : null}\n          {/* for all items */}\n          {props.todos.length > 0 && sort === \"all\"\n            ? props.todos.map((item) => {\n                return (\n                  <TodoItem\n                    key={item.id}\n                    item={item}\n                    removeTodo={props.removeTodo}\n                    updateTodo={props.updateTodo}\n                    completeTodo={props.completeTodo}\n                  />\n                );\n              })\n            : null}\n        </AnimatePresence>\n      </ul>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayTodos);\n","export default __webpack_public_path__ + \"static/media/display.39b2c594.gif\";","export default __webpack_public_path__ + \"static/media/imagex.162fcedf.gif\";","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodos } from \"../redux/reducer\";\nimport { GoPlus } from \"react-icons/go\";\nimport { motion } from \"framer-motion\";\nimport DisplayImage from '../Images/display.gif'\nimport DisplayImageX from '../Images/imagex.gif'\nimport swal from 'sweetalert';\n\nimport '../css/main.css'\nconst mapStateToProps = (state) => {\n  return {\n    todos: state,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTodo: (obj) => dispatch(addTodos(obj)),\n  };\n};\n\nconst Todos = (props) => {\n  const [todo, setTodo] = useState(\"\");\n\n  const handleChange = (e) => {\n    setTodo(e.target.value);\n  };\n\n  const add = () => {\n    if (todo === \"\") {\n\n      swal({\n        title: \"Wait !!!\",\n        text: \"You cannot have Empty Task\",\n        icon: \"warning\",\n        button: \"Click Here\",\n        timer:3000,\n      });\n\n    } else {\n      props.addTodo({\n        id: Math.floor(Math.random() * 1000),\n        item: todo,\n        completed: false,\n      });\n      setTodo(\"\");\n    }\n  };\n  //console.log(\"props from store\", props);\n  return (\n    <div className=\"addTodos\">\n      <img className=\"image\" src={DisplayImage} alt=\"displayImage\" />\n      <input\n        type=\"text\"\n        onChange={(e) => handleChange(e)}\n        className=\"todo-input\"\n        value={todo}\n      />\n\n      <motion.button\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.9 }}\n        className=\"add-btn\"\n        onClick={() => add()}\n      >\n       {todo?<h6>Add</h6>:<GoPlus />}\n      </motion.button>\n      <img className=\"imageX\" src={DisplayImageX} alt=\"displayImageX\" />\n      <br />\n    </div>\n  );\n};\n//we can use connect method to connect this component with redux store\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n","import \"./css/main.css\";\nimport DisplayTodos from \"./components/DisplayTodos\";\nimport Todos from \"./components/Todos\";\n\nimport { motion } from \"framer-motion\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <motion.h1\n        initial={{ y: -200 }}\n        animate={{ y: 0 }}\n        transition={{ type: \"spring\", duration: 0.5 }}\n        whileHover={{ scale: 1.1 }}\n      >\n        Todo App\n      </motion.h1>\n      <motion.div\n        initial={{ y: 1000 }}\n        animate={{ y: 0 }}\n        transition={{ type: \"spring\", duration: 1 }}\n      >\n        <Todos />\n        <DisplayTodos />\n      </motion.div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./reducer\";\n\nconst store = configureStore({\n  reducer: reducer,\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}